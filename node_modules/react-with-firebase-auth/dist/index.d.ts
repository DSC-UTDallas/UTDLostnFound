import * as React from 'react';
import * as firebase from 'firebase';
export declare type WrappedComponentProps = {
    signInWithEmailAndPassword: (email: string, password: string) => void;
    createUserWithEmailAndPassword: (email: string, password: string) => void;
    signInWithGoogle: () => void;
    signInWithFacebook: () => void;
    signInWithGithub: () => void;
    signInWithTwitter: () => void;
    signInAnonymously: () => void;
    signOut: () => void;
    setError: (error: any) => void;
    user?: firebase.User;
    error?: firebase.FirebaseError;
};
export declare type PossibleProviders = 'googleProvider' | 'facebookProvider' | 'twitterProvider' | 'githubProvider';
export declare type ProvidersMapper = {
    googleProvider?: firebase.auth.GithubAuthProvider_Instance;
    facebookProvider?: firebase.auth.FacebookAuthProvider_Instance;
    twitterProvider?: firebase.auth.TwitterAuthProvider_Instance;
    githubProvider?: firebase.auth.GithubAuthProvider_Instance;
};
export declare type HocParameters = {
    firebaseAppAuth: firebase.auth.Auth;
    providers?: ProvidersMapper;
};
declare const withFirebaseAuth: ({ firebaseAppAuth, providers, }: HocParameters) => (WrappedComponent: React.StatelessComponent<WrappedComponentProps>) => {
    new (props: Readonly<{}>): {
        state: {
            user: undefined;
            error: undefined;
        };
        componentDidMount(): void;
        setError: (error: any) => void;
        tryTo: (operation: () => void) => Promise<void>;
        tryToSignInWithProvider: (provider: PossibleProviders) => Promise<void>;
        signOut: () => Promise<void>;
        signInAnonymously: () => Promise<void>;
        signInWithGithub: () => Promise<void>;
        signInWithTwitter: () => Promise<void>;
        signInWithGoogle: () => Promise<void>;
        signInWithFacebook: () => Promise<void>;
        signInWithEmailAndPassword: (email: string, password: string) => Promise<void>;
        createUserWithEmailAndPassword: (email: string, password: string) => Promise<void>;
        render(): JSX.Element;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{}>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    new (props: {}, context?: any): {
        state: {
            user: undefined;
            error: undefined;
        };
        componentDidMount(): void;
        setError: (error: any) => void;
        tryTo: (operation: () => void) => Promise<void>;
        tryToSignInWithProvider: (provider: PossibleProviders) => Promise<void>;
        signOut: () => Promise<void>;
        signInAnonymously: () => Promise<void>;
        signInWithGithub: () => Promise<void>;
        signInWithTwitter: () => Promise<void>;
        signInWithGoogle: () => Promise<void>;
        signInWithFacebook: () => Promise<void>;
        signInWithEmailAndPassword: (email: string, password: string) => Promise<void>;
        createUserWithEmailAndPassword: (email: string, password: string) => Promise<void>;
        render(): JSX.Element;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{}>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    displayName: string;
};
export default withFirebaseAuth;
